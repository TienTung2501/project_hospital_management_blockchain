'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { decryptFile } from '@/helpers/utils';
import { FaSpinner } from 'react-icons/fa';
import convertIpfsAddressToUrl from '@/helpers/convertIpfsAddressToUrl';

const DecryptPage = () => {
  const { cid } = useParams(); // L·∫•y tham s·ªë cid t·ª´ URL
  const [encryptKey, setEncryptKey] = useState<string>('');
  const [decryptedBlobUrl, setDecryptedBlobUrl] = useState<string | null>(null);
  const [previewBlobUrl, setPreviewBlobUrl] = useState<string | null>(null); // Blob cho preview
  const [isLoading, setIsLoading] = useState(false);

  const [userPermissions, setUserPermissions] = useState({
    view: true,  // Quy·ªÅn xem
    download: false,  // Quy·ªÅn t·∫£i
    print: false,  // Quy·ªÅn in
  });

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const encryptKeyFromQuery = urlParams.get('param'); // L·∫•y 'param' t·ª´ query string
    if (encryptKeyFromQuery) setEncryptKey(encryptKeyFromQuery);
  }, []);

  useEffect(() => {
    if (cid) {
      const ipfsUrl = convertIpfsAddressToUrl(`ipfs://${cid}`);
      setPreviewBlobUrl(ipfsUrl); // Set URL preview ƒë·ªÉ xem tr∆∞·ªõc file t·ª´ IPFS
    }
  }, [cid]);

  const handleDecryptFromIPFS = async () => {
    setIsLoading(true);
    if (!encryptKey) {
      alert('Vui l√≤ng nh·∫≠p AES key ƒë·ªÉ gi·∫£i m√£.');
      return;
    }
    try {
      const response = await fetch(previewBlobUrl!);
      const encryptedText = await response.text();
      const decryptedBlob = await decryptFile(encryptedText, encryptKey);
      const blobUrl = URL.createObjectURL(decryptedBlob);
      setDecryptedBlobUrl(blobUrl); // C·∫≠p nh·∫≠t URL ƒë√£ gi·∫£i m√£
    } catch (error) {
      console.error('L·ªói gi·∫£i m√£:', error);
      alert('Gi·∫£i m√£ th·∫•t b·∫°i, ki·ªÉm tra l·∫°i AES key v√† file.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = () => {
    if (decryptedBlobUrl) {
      const link = document.createElement('a');
      link.href = decryptedBlobUrl;
      link.download = 'document.pdf'; // T√™n file khi t·∫£i v·ªÅ
      link.click();
    }
  };

  const handlePrint = () => {
    if (decryptedBlobUrl) {
      const printWindow = window.open(decryptedBlobUrl, '_blank');
      printWindow?.print();
    }
  };

  return (
    <div className="container mx-auto px-4 py-12">
      <h1 className="text-3xl font-bold mb-8 text-center">üîê Gi·∫£i m√£ & Hi·ªÉn th·ªã PDF t·ª´ IPFS</h1>

      <div className="mb-6 max-w-xl mx-auto">
        <label className="block mb-2 font-medium">AES Key</label>
        <input
          type="text"
          className="w-full bg-gray-100 p-3 rounded-md border border-gray-300"
          value={encryptKey}
          onChange={(e) => setEncryptKey(e.target.value)}
          placeholder="Nh·∫≠p AES Key d√πng ƒë·ªÉ m√£ h√≥a"
        />
      </div>

      <div className="mb-6 text-center">
        <button
          onClick={handleDecryptFromIPFS}
          className="px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          {isLoading ? (
            <FaSpinner className="animate-spin inline-block" />
          ) : (
            'üîì Gi·∫£i m√£ file t·ª´ IPFS'
          )}
        </button>
      </div>

      {/* Hi·ªÉn th·ªã ph·∫ßn xem tr∆∞·ªõc khi ch∆∞a gi·∫£i m√£ */}
      {previewBlobUrl && !decryptedBlobUrl && (
        <div className="mt-6 relative w-full h-[80vh]">
          <iframe
            src={previewBlobUrl}
            className="w-full h-full rounded-lg border shadow-md"
            title="PDF g·ªëc (ch∆∞a gi·∫£i m√£)"
          ></iframe>
        </div>
      )}

      {/* Hi·ªÉn th·ªã PDF ƒë√£ gi·∫£i m√£ n·∫øu c√≥ */}
      {decryptedBlobUrl && (
        <div className="mt-6 relative w-full h-[80vh]">
          <iframe
            src={decryptedBlobUrl}
            className="w-full h-full rounded-lg border shadow-md"
            title="PDF ƒë√£ gi·∫£i m√£"
          ></iframe>
        </div>
      )}

      {/* Ch·ªâ hi·ªÉn th·ªã c√°c n√∫t n·∫øu c√≥ quy·ªÅn t·∫£i v√† in */}
      {userPermissions.view && (
        <div className="mt-6 text-center">
          {userPermissions.download && (
            <button
              onClick={handleDownload}
              className="px-6 py-3 bg-green-600 text-white rounded hover:bg-green-700 transition mb-4"
            >
              T·∫£i v·ªÅ
            </button>
          )}

          {userPermissions.print && (
            <button
              onClick={handlePrint}
              className="px-6 py-3 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition"
            >
              In t√†i li·ªáu
            </button>
          )}

          {/* N·∫øu kh√¥ng c√≥ quy·ªÅn t·∫£i ho·∫∑c in, hi·ªÉn th·ªã th√¥ng b√°o */}
          {!userPermissions.download && !userPermissions.print && (
            <p className="text-gray-500">B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫£i ho·∫∑c in t√†i li·ªáu n√†y.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default DecryptPage;
