"use client";
import React, { useState, useContext, useEffect } from 'react';
import NFTCard from '@/components/nft-card';
import { AssetType, medRecord, UtxoRequest } from '@/types/GenericsType';
import { getAllAsset } from '@/helpers/fetchAsset/fetchAssetsFromAddress';
import { LucidContextType } from '@/types/LucidContextType';
import LucidContext from '@/contexts/components/LucidContext';
import { Button } from "@/components/ui/button";
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { PagePagination } from '@/components/PagePagination';
import Link from "next/link";
import { toast } from 'react-toastify';
import { filterUtxoByPolicyIdMedRecordFromRequestContract, getListUtxoFromGrantContractByAddress, getListUtxoFromRequestContractByAddress } from '@/helpers/findUtxoOnSmartContract';
import { cancelRequest } from '@/actions/requestMedRecord';

export default function Home() {
  const [assets, setAssets] = useState<medRecord[]>([]);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [searchValue, setSearchValue] = useState<string>("");
  const [addressFix, setAddressFix] = useState<string>("");
  const [notification, setNotification] = useState<string>("");
  const [isCanCancel, setIsCanCancel] = useState<boolean>(false);
  const {isConnected, refreshWallet, connectWallet, disconnectWallet, walletItem, setWalletItem, setIsLoading, loadingConnectWallet, lucidNeworkPlatform } = useContext<LucidContextType>(LucidContext);
  const itemsPerPage = 8; // S·ªë l∆∞·ª£ng items m·ªói trang
  // Theo d√µi ƒë·ªãnh k·ª≥ xem c√≥ th·ªÉ hu·ª∑ hay kh√¥ng
  useEffect(() => {
    if (!lucidNeworkPlatform || !walletItem.walletAddress) return;
  
    const checkCancelable = async () => {
      try {
        const assetData = await getAllAsset(searchValue);
        const utxosRequest = await getListUtxoFromRequestContractByAddress({
          lucid: lucidNeworkPlatform,
          addressRequestor: walletItem.walletAddress,
        });
        const utxosGrant = await getListUtxoFromGrantContractByAddress({
          lucid: lucidNeworkPlatform,
          addressRequestor: walletItem.walletAddress,
        });
  
        let canCancel = false;
  
        assetData.forEach((med) => {
          const matchingGrant = utxosGrant.find(
            (grant) => grant.policyIdMedRecord === med.policyId
          );
          if (matchingGrant) {
            med.encryptAesKeyGranted = matchingGrant.encyptAesKey;
            med.encryptNonceGranted = matchingGrant.nonceAccess;
          }
  
          const matchingRequest = utxosRequest.find(
            (request) => request.policyIdMedRecord === med.policyId
          );
          med.isRequested = !!matchingRequest;
  
          // üß† Ch·ªâ c√≥ th·ªÉ h·ªßy n·∫øu ƒë√£ y√™u c·∫ßu v√† ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn
          if (matchingRequest && !matchingGrant?.nonceAccess) {
            canCancel = true;
          }
        });
  
        setIsCanCancel(canCancel); // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra UTxO:", error);
        setIsCanCancel(false);
      }
    };
  
    const interval = setInterval(checkCancelable, 10000);
    checkCancelable(); // ch·∫°y l·∫ßn ƒë·∫ßu
  
    return () => clearInterval(interval);
  }, [lucidNeworkPlatform, walletItem.walletAddress, searchValue]);
  
  
  const submitAddress = async () => {
    setAssets([]);
    setAddressFix("");
    setIsCanCancel(false); // Reset tr·∫°ng th√°i ban ƒë·∫ßu
    if (!lucidNeworkPlatform || !walletItem.walletAddress) return;
  
    if (!searchValue) {
      setNotification("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠ h·ª£p l·ªá.");
      return;
    }
  
    const inputAddress = searchValue.trim().toLowerCase();
    const userAddress = walletItem.walletAddress.toLowerCase();
  
    if (inputAddress === userAddress) {
      setNotification("ƒê√¢y l√† v√≠ c·ªßa b·∫°n. Kh√¥ng c·∫ßn c·∫•p quy·ªÅn xem h·ªì s∆°!!! Vui l√≤ng nh·∫≠p v√≠ kh√°c ƒë·ªÉ truy c·∫≠p h·ªì s∆°.");
      return;
    }
  
    try {
      setIsLoading(true);
      const assetData = await getAllAsset(searchValue);
  
      const utxosRequest = await getListUtxoFromRequestContractByAddress({
        lucid: lucidNeworkPlatform,
        addressRequestor: walletItem.walletAddress,
      });
  
      const utxosGrant = await getListUtxoFromGrantContractByAddress({
        lucid: lucidNeworkPlatform,
        addressRequestor: walletItem.walletAddress,
      });
  
      let canCancel = false;
  
      assetData.forEach((med) => {
        const matchingGrant = utxosGrant.find(
          (grant) => grant.policyIdMedRecord === med.policyId
        );
  
        if (matchingGrant) {
          med.encryptAesKeyGranted = matchingGrant.encyptAesKey;
          med.encryptNonceGranted = matchingGrant.nonceAccess;
        }
  
        const matchingRequest = utxosRequest.find(
          (request) => request.policyIdMedRecord === med.policyId
        );
  
        med.isRequested = !!matchingRequest;
  
        // ‚úÖ Ch·ªâ cho ph√©p hu·ª∑ n·∫øu ƒë√£ y√™u c·∫ßu v√† ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn
        if (matchingRequest && !matchingGrant?.nonceAccess) {
          canCancel = true;
        }
      });
      
      setIsCanCancel(canCancel);
      console.log(assetData)
      if (assetData.length > 0) {
        setAddressFix(searchValue);
        setAssets(assetData);
        setNotification("");
      } else {
        setNotification("Kh√¥ng c√≥ h·ªì s∆° n√†o ho·∫∑c ƒë·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá.");
      }
    } catch (error) {
      console.error(error);
      setNotification("Kh√¥ng th·ªÉ t·∫£i t√†i s·∫£n! ƒê·ªãa ch·ªâ nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói d·ªØ li·ªáu onchain!!!");
    } finally {
      setIsLoading(false);
    }
  };
  
  

  const handleCancelAllRequest=async ()=>{
    if(!isConnected){
      toast.error("Vui l√≤ng k·∫øt n·ªëi v√≠ ƒë·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác!");
    }
    if(walletItem.walletAddress&&isConnected){
     
      setIsLoading(true)
      const txHash  = await cancelRequest({
        lucid: lucidNeworkPlatform,
        requestorAddress: walletItem.walletAddress,
        cancelAll:true,
      });
      if(txHash){
        toast.success("ƒê√£ h·ªßy y√™u c·∫ßu th√†nh c√¥ng!!!");
        setIsCanCancel(false);
      }
      else{
        toast.error("Kh√¥ng th√†nh c√¥ng!!!");
      }
      setIsLoading(false);
    } 
  }

  // T√≠nh to√°n c√°c m·ª•c hi·ªÉn th·ªã cho m·ªói trang
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = assets.slice(indexOfFirstItem, indexOfLastItem);

  const totalPages = Math.ceil(assets.length / itemsPerPage);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <div className="container mx-auto px-4 py-12 w-full">
      <div className="text-center border-b-2 border-purple-600 pb-8">
        <h1 className="text-4xl font-bold text-white mb-6">N·ªÅn t·∫£ng qu·∫£n l√Ω h·ªì s∆° y t·∫ø</h1>
        <p className="text-xl text-gray-300 mb-8">Qu·∫£n l√Ω l∆∞u tr·ªØ, qu·∫£n l√Ω truy c·∫≠p h·ªì s∆° y t·∫ø</p>
        <div className="flex justify-center gap-4">
          <Link href="/create">
            <Button className="bg-purple-600 hover:bg-purple-700">T·∫°o h·ªì s∆°</Button>
          </Link>
          <Link href="/explore">
            <Button variant="outline" className="border-purple-500 text-purple-300 hover:bg-purple-800">
              Kh√°m ph√°
            </Button>
          </Link>
        </div>
      </div>

      <div className="flex items-center space-x-4 pt-6">
  <div className="space-y-2 w-full">
    <Label htmlFor="name" className="text-white">
      Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ ch·ª©a h·ªì s∆° mu·ªën truy c·∫≠p!!!
    </Label>
    <Input
      id="address_wallet"
      placeholder="ƒê·ªãa ch·ªâ v√≠"
      className="bg-indigo-900/30 border-indigo-600/50 text-white"
      value={searchValue}
      onChange={(e) => setSearchValue(e.target.value)}
      required
    />
  </div>
  
  <Button
    variant="outline"
    className="border-indigo-600/50 text-indigo-300 hover:bg-indigo-800 w-auto mt-6"
    onClick={submitAddress}
  >
    Submit
  </Button>
      </div>

      
      {/* Th√™m th·∫ª th√¥ng b√°o */}
      {notification && (
        <div className="mt-4 p-4 bg-gray-600 text-white rounded pt-4">
          {notification}
        </div>
      )}


      {assets?.length > 0 && (
        <div className="mt-6 p-4 bg-gray-600 rounded-lg shadow-md text-center space-y-4">
          <p className="text-xl text-gray-300">üìã Danh s√°ch c√°c h·ªì s∆° y t·∫ø c·ªßa ƒë·ªãa ch·ªâ v√≠</p>
          {isConnected&&isCanCancel&&
          <Button
          variant="outline"
          className="w-full sm:w-1/2 mx-auto border-indigo-600/50 text-indigo-300 hover:bg-indigo-800"
          onClick={handleCancelAllRequest}
        >
          H·ªßy t·∫•t c·∫£ y√™u c·∫ßu
        </Button>
          }
        </div>
      )}

      
      <div id="area-bidding-list" className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5 pt-4">
        {currentItems.map((asset) => (
          <NFTCard
              key={asset.asset}
              medRecord={{
                ...asset,
                ownerAddress:addressFix,
              }}
              isCardRequest={true} // Th√™m th√¥ng tin cho lo·∫°i card l√† medRecord
            />

        ))}
      </div>
      <div id="area-pagination" className="flex justify-center pt-8">
        <PagePagination
          totalItems={assets.length}
          itemsPerPage={itemsPerPage}
          currentPage={currentPage}
          onPageChange={handlePageChange}
        />
      </div>
    </div>
  );
}
