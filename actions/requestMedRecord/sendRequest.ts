import { Lucid } from "lucid-cardano";
import lockRequest from "@/services/cardano/lockRequest";
import { convertBase64ToHex } from "@/helpers/convertBase64ToHex";
import { getEcPublicKeyByAddress } from "@/utils/test/getKey";

type SendRequestParams = {
  lucid: Lucid;
  title: string;
  policyId?: string;
  policyIdMedRecord: string;
  ownerAddress: string; // ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi s·ªü h·ªØu h·ªì s∆°
  requestorAddress: string; // ƒë·ªãa ch·ªâ ng∆∞·ªùi y√™u c·∫ßu
};

export async function sendRequest({
  lucid,
  title,
  policyId,
  policyIdMedRecord,
  ownerAddress,
  requestorAddress,
}: SendRequestParams) {
  try {
    // üîë L·∫•y public key t·ª´ file keypair l∆∞u local
    const publicEcRequest = await getEcPublicKeyByAddress(requestorAddress)!;
    

    // G·ªçi lockRequest ƒë·ªÉ th·ª±c hi·ªán mint & lock token
    const result = await lockRequest({
      lucid,
      title,
      policyId,
      policyIdMedRecord,
      ownerAddress,
      requestorPublicKey:publicEcRequest!,
    });

    return result;
  } catch (error) {
    console.error("‚ùå G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i:", error);
    throw new Error("G·ª≠i request th·∫•t b·∫°i");
  }
}
